/* 
 * --------------------ECOBIKE RENTAL 1.0.1--------------------
 *
 * Design and Software Construction 20201
 *
 * Copyright (C) 2020 by Group 11
 *
 * Nguyen Thanh Long
 * Nguyen Hai Long
 * Nguyen Cong Luat
 * UN LyAn
 *
 * This software is created for academic purposes only. Not for
 * commercial purposes. We do not guarantee maintenance issues.
 *
 * ------------------------------------------------------------
 */
package com.hust.group11.ecobikerentalgroup11.boundary;

import com.hust.group11.ecobikerentalgroup11.controller.RentBikeController;
import com.hust.group11.ecobikerentalgroup11.controller.RentingController;
import com.hust.group11.ecobikerentalgroup11.entity.Bike;
import com.hust.group11.ecobikerentalgroup11.entity.Transaction;
import com.hust.group11.ecobikerentalgroup11.MainEntry;
import java.io.IOException;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nguyencongluat
 */
public class RentingScreen extends javax.swing.JFrame {

    /**
     * Creates new form Renting
     */
    private final JFrame backScreen;
    private final Bike bike;
    private final Transaction transaction;
    private final RentingController rentingController;
    private final RentBikeController rentBikeController;
    private double amountPayment;
    private String totalTime;

    /**
     * Constructor from renting screen
     *
     * @param transaction
     * @param backScreen
     * @throws IOException
     * @throws ParseException
     */
    public RentingScreen(Transaction transaction, JFrame backScreen) throws IOException, ParseException {
        initComponents();
        this.setIconImage(ImageIO.read(getClass().getClassLoader().getResourceAsStream("img/icon_app.png")));
        this.backScreen = backScreen;
        this.transaction = transaction;
        this.rentingController = new RentingController();
        this.rentBikeController = new RentBikeController();
        this.bike = rentBikeController.getBikeById(transaction.getBikeId(), "bike_id");
        showInfoTable();
    }

    /**
     * Show information of bike when renting. price rental and time renting is
     * running real time.
     *
     * @throws ParseException
     */
    public void showInfoTable() throws ParseException {
        DefaultTableModel model = (DefaultTableModel) rentingBikeTable.getModel();
        rentBikeController.showInfoBike(model, bike);
        model.addRow(new Object[]{"Start time", transaction.getStartTime()});
        model.addRow(new Object[]{"Rental", ""});
        Date startTime = rentingController.getDateFormat(transaction.getStartTime());
        Timer t = new Timer();
        t.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                long currentTime = System.currentTimeMillis();
                long rentingTime = currentTime - startTime.getTime();
                totalTime = rentingController.getTimeRentingFormat(rentingTime);
                rentingTimeField.setText(totalTime);
                long timeMinute = rentingTime / (1000 * 60);
                amountPayment = rentingController.calculateBikeRental(timeMinute);
                model.setValueAt(rentingController.getAmountPaymentFormat(amountPayment), rentingBikeTable.getRowCount() - 1, 1);
            }
        }, 0, 1000);
        imageCodePanel.showImage(getClass().getClassLoader().getResourceAsStream("img/" + bike.getImage()));
        imageCodePanel.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        rentingBikeTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        imageCodePanel = new com.hust.group11.ecobikerentalgroup11.boundary.ImageCodePanel();
        rentingTimeLabel = new javax.swing.JLabel();
        rentingTimeField = new javax.swing.JTextField();
        backButton = new javax.swing.JToggleButton();
        returnButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Renting Information");
        setResizable(false);

        rentingBikeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(rentingBikeTable);
        if (rentingBikeTable.getColumnModel().getColumnCount() > 0) {
            rentingBikeTable.getColumnModel().getColumn(0).setResizable(false);
            rentingBikeTable.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Renting Information:");

        imageCodePanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout imageCodePanelLayout = new javax.swing.GroupLayout(imageCodePanel);
        imageCodePanel.setLayout(imageCodePanelLayout);
        imageCodePanelLayout.setHorizontalGroup(
            imageCodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );
        imageCodePanelLayout.setVerticalGroup(
            imageCodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 171, Short.MAX_VALUE)
        );

        rentingTimeLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        rentingTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        rentingTimeLabel.setText("Renting Time:");

        rentingTimeField.setEditable(false);

        backButton.setText("Home");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goBackHome(evt);
            }
        });

        returnButton.setText("Return Bike");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnBike(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Bike Renting");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(returnButton))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(rentingTimeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(rentingTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(imageCodePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(78, 78, 78))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(rentingTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rentingTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(imageCodePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(returnButton))
                .addGap(33, 33, 33))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handle event user click to back button.
     *
     * @param evt
     */
    private void goBackHome(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goBackHome
        try {
            MainEntry.move(this, new HomeScreen(transaction, this));
        } catch (SQLException | IOException ex) {
            Logger.getLogger(RentingScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_goBackHome

    /**
     * Handle event user click to return button
     *
     * @param evt
     */
    private void returnBike(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnBike
        try {
            transaction.refeshTransactionTimeNow(rentingController.getDateNowFormat(), amountPayment, totalTime);
            MainEntry.move(this, new ScanCodeScreen("", transaction, this));
        } catch (SQLException | IOException ex) {
            Logger.getLogger(RentingScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_returnBike


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton backButton;
    private com.hust.group11.ecobikerentalgroup11.boundary.ImageCodePanel imageCodePanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable rentingBikeTable;
    private javax.swing.JTextField rentingTimeField;
    private javax.swing.JLabel rentingTimeLabel;
    private javax.swing.JButton returnButton;
    // End of variables declaration//GEN-END:variables
}
