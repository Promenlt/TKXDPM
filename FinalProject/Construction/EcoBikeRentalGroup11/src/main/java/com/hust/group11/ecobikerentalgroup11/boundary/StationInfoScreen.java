/* 
 * --------------------ECOBIKE RENTAL 1.0.1--------------------
 *
 * Design and Software Construction 20201
 *
 * Copyright (C) 2020 by Group 11
 *
 * Nguyen Thanh Long
 * Nguyen Hai Long
 * Nguyen Cong Luat
 * UN LyAn
 *
 * This software is created for academic purposes only. Not for
 * commercial purposes. We do not guarantee maintenance issues.
 *
 * ------------------------------------------------------------
 */
package com.hust.group11.ecobikerentalgroup11.boundary;

import com.hust.group11.ecobikerentalgroup11.Constants;
import com.hust.group11.ecobikerentalgroup11.entity.Station;
import com.hust.group11.ecobikerentalgroup11.entity.Transaction;
import com.hust.group11.ecobikerentalgroup11.MainEntry;
import java.io.IOException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nguyen Hai Long
 */
public class StationInfoScreen extends javax.swing.JFrame {

    /**
     * Creates new form StationInfoScreen
     */
    private final JFrame backScreen;
    private final Station station;
    private Transaction transaction;

    /**
     * Init Station Information Screen For User Want To Rent Bike
     *
     * @param backScreen
     * @param station
     * @throws IOException
     */
    public StationInfoScreen(JFrame backScreen, Station station) throws IOException {
        this.setIconImage(ImageIO.read(getClass().getClassLoader().getResourceAsStream("img/icon_app.png")));
        initComponents();
        this.station = station;
        this.backScreen = backScreen;
        showStationInfo();
        imageMap.showImage(getClass().getClassLoader().getResourceAsStream("img/station.jpg"));
    }

    /**
     * Init Station Information Screen For User Want To Return Bike
     *
     * @param backScreen
     * @param station
     * @param transaction
     * @throws IOException
     */
    public StationInfoScreen(JFrame backScreen, Station station, Transaction transaction) throws IOException {
        this.setIconImage(ImageIO.read(getClass().getClassLoader().getResourceAsStream("img/icon_app.png")));
        initComponents();
        this.station = station;
        this.transaction = transaction;
        this.backScreen = backScreen;
        showStationInfo();
        imageMap.showImage(getClass().getClassLoader().getResourceAsStream("img/station.jpg"));
    }

    private void showStationInfo() {
        stationName.setText(station.getStationName());
        DefaultTableModel model = (DefaultTableModel) stationInfoTable.getModel();
        model.setValueAt(station.getStationName(), 0, 1);
        model.setValueAt(station.getAddress(), 1, 1);
        model.setValueAt(station.getStationArea(), 2, 1);
        model.setValueAt("100 m", 3, 1);
        model.setValueAt("5 minutes", 4, 1);
        model.setValueAt(station.getNumberDockingPoint(), 5, 1);
        model.setValueAt(station.getNumBikeAvailable(), 6, 1);
        model.fireTableDataChanged();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        stationName = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        stationInfoTable = new javax.swing.JTable();
        buttonViewbikelist = new javax.swing.JButton();
        imageMap = new com.hust.group11.ecobikerentalgroup11.boundary.ImageCodePanel();
        backButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Station Infomation");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        stationName.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        stationName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        stationName.setText("Station name");
        stationName.setToolTipText("");
        stationName.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        stationInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Name station", null},
                {"Address", null},
                {"Area", null},
                {"Distance to station", null},
                {"Walking-times", null},
                {"Number docking point", null},
                {"Number bike available", null}
            },
            new String [] {
                "Name", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        stationInfoTable.setColumnSelectionAllowed(true);
        stationInfoTable.setName(""); // NOI18N
        stationInfoTable.setOpaque(false);
        stationInfoTable.setRowHeight(20);
        stationInfoTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(stationInfoTable);
        stationInfoTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (stationInfoTable.getColumnModel().getColumnCount() > 0) {
            stationInfoTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            stationInfoTable.getColumnModel().getColumn(1).setResizable(false);
            stationInfoTable.getColumnModel().getColumn(1).setPreferredWidth(130);
        }

        buttonViewbikelist.setText("List Bike");
        buttonViewbikelist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewListBike(evt);
            }
        });

        imageMap.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout imageMapLayout = new javax.swing.GroupLayout(imageMap);
        imageMap.setLayout(imageMapLayout);
        imageMapLayout.setHorizontalGroup(
            imageMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 187, Short.MAX_VALUE)
        );
        imageMapLayout.setVerticalGroup(
            imageMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 167, Short.MAX_VALUE)
        );

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goBack(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(stationName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(buttonViewbikelist))
                            .addComponent(imageMap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(stationName, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(imageMap, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonViewbikelist)
                    .addComponent(backButton))
                .addGap(32, 32, 32))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handle event user click to back button.
     *
     * @param evt
     */
    private void goBack(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goBack
        MainEntry.move(this, backScreen);
    }//GEN-LAST:event_goBack

    private void viewListBike(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewListBike
        try {
            if (MainEntry.user.getStatus() == Constants.USER_AVAIL) {
                MainEntry.move(this, new ViewListBikeScreen(this, station));
            } else {
                MainEntry.move(this, new ViewListBikeScreen(this, station, transaction));
            }
        } catch (SQLException | IOException ex) {
            Logger.getLogger(StationInfoScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_viewListBike


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton buttonViewbikelist;
    private com.hust.group11.ecobikerentalgroup11.boundary.ImageCodePanel imageMap;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable stationInfoTable;
    private javax.swing.JLabel stationName;
    // End of variables declaration//GEN-END:variables
}
