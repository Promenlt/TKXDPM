/* 
 * --------------------ECOBIKE RENTAL 1.0.1--------------------
 *
 * Design and Software Construction 20201
 *
 * Copyright (C) 2020 by Group 11
 *
 * Nguyen Thanh Long
 * Nguyen Hai Long
 * Nguyen Cong Luat
 * UN LyAn
 *
 * This software is created for academic purposes only. Not for
 * commercial purposes. We do not guarantee maintenance issues.
 *
 * ------------------------------------------------------------
 */
package com.hust.group11.ecobikerentalgroup11.boundary;

import com.hust.group11.ecobikerentalgroup11.Constants;
import com.hust.group11.ecobikerentalgroup11.entity.Bike;
import com.hust.group11.ecobikerentalgroup11.entity.Station;
import com.hust.group11.ecobikerentalgroup11.entity.Transaction;
import com.hust.group11.ecobikerentalgroup11.MainEntry;
import com.hust.group11.ecobikerentalgroup11.controller.ViewStationController;
import java.awt.event.ActionEvent;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Nguyen Hai Long
 */
public class ViewListBikeScreen extends javax.swing.JFrame {

    /**
     * Creates new form ViewListBikeScreen
     */
    private final JFrame backScreen;
    private final Station station;
    private final ArrayList<Bike> arrBike;
    private Bike passBike;
//    private DockingPoint dockingPoint;
    private Transaction transaction;
    private final ViewStationController stationController;

    /**
     * Init List Bike Screen For User Want To Rent Bike
     *
     * @param backScreen
     * @param station
     * @throws SQLException
     * @throws IOException
     */
    public ViewListBikeScreen(JFrame backScreen, Station station) throws SQLException, IOException {
        initComponents();
        this.setIconImage(ImageIO.read(getClass().getClassLoader().getResourceAsStream("img/icon_app.png")));
        this.station = station;
        stationName.setHorizontalAlignment(javax.swing.JLabel.CENTER);
        stationName.setText(station.getStationName());
        this.backScreen = backScreen;
        this.stationController = new ViewStationController();
        this.arrBike = station.getArrayBike();
        DefaultTableModel model = (DefaultTableModel) listBikeTable.getModel();
        this.stationController.processViewBikeStation(model, arrBike);
        sortTable();
        if (MainEntry.user.getStatus() == Constants.USER_RENTING) {
            actionBikeButton.setText("Return Bike");
        }
    }

    /**
     * Init List Bike Screen For User Want To Return Bike
     *
     * @param backScreen
     * @param station
     * @param transaction
     * @throws SQLException
     * @throws IOException
     */
    public ViewListBikeScreen(JFrame backScreen, Station station, Transaction transaction) throws SQLException, IOException {
        initComponents();
        this.setIconImage(ImageIO.read(getClass().getClassLoader().getResourceAsStream("img/icon_app.png")));
        this.station = station;
        stationName.setHorizontalAlignment(javax.swing.JLabel.CENTER);
        stationName.setText(station.getStationName());
        this.backScreen = backScreen;
        this.stationController = new ViewStationController();
        arrBike = station.getArrayBike();
        this.transaction = transaction;
        DefaultTableModel model = (DefaultTableModel) listBikeTable.getModel();
        this.stationController.processViewBikeStation(model, arrBike);
        sortTable();
        if (MainEntry.user.getStatus() == Constants.USER_RENTING) {
            actionBikeButton.setText("Return Bike");
        }
    }

    /**
     * Show list bike in table
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        filterComboBox = new javax.swing.JComboBox<>();
        actionBikeButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listBikeTable = new javax.swing.JTable();
        stationName = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("View List Bike");
        setResizable(false);

        jLabel1.setText("Chooce bike type:");

        filterComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Single Bike", "Double Bike", "Electric Bike" }));

        actionBikeButton.setText("Rent bike");
        actionBikeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionBike(evt);
            }
        });

        listBikeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Plate License", "Model", "Type", "Battery", "Status", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        listBikeTable.setToolTipText("");
        listBikeTable.setSelectionBackground(new java.awt.Color(204, 204, 204));
        listBikeTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(listBikeTable);
        if (listBikeTable.getColumnModel().getColumnCount() > 0) {
            listBikeTable.getColumnModel().getColumn(0).setResizable(false);
            listBikeTable.getColumnModel().getColumn(0).setPreferredWidth(10);
            listBikeTable.getColumnModel().getColumn(1).setResizable(false);
            listBikeTable.getColumnModel().getColumn(1).setPreferredWidth(60);
            listBikeTable.getColumnModel().getColumn(2).setResizable(false);
            listBikeTable.getColumnModel().getColumn(2).setPreferredWidth(50);
            listBikeTable.getColumnModel().getColumn(3).setResizable(false);
            listBikeTable.getColumnModel().getColumn(3).setPreferredWidth(50);
            listBikeTable.getColumnModel().getColumn(4).setResizable(false);
            listBikeTable.getColumnModel().getColumn(4).setPreferredWidth(40);
            listBikeTable.getColumnModel().getColumn(5).setResizable(false);
            listBikeTable.getColumnModel().getColumn(5).setPreferredWidth(50);
            listBikeTable.getColumnModel().getColumn(6).setResizable(false);
            listBikeTable.getColumnModel().getColumn(6).setPreferredWidth(60);
        }

        stationName.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        stationName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        stationName.setText("Station name");
        stationName.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goBack(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(43, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 606, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(actionBikeButton))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(stationName, javax.swing.GroupLayout.PREFERRED_SIZE, 606, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(filterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(51, 51, 51))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(stationName, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(filterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(actionBikeButton))
                .addGap(30, 30, 30))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    private void sortTable() {
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(listBikeTable.getModel());
        listBikeTable.setRowSorter(sorter);
        filterComboBox.addActionListener((ActionEvent e) -> {
            String text = filterComboBox.getSelectedItem().toString();
            if (text.trim().length() == 0) {
                sorter.setRowFilter(null);
            } else {
                if (text.trim().equals("All")) {
                    sorter.setRowFilter(RowFilter.regexFilter("(?i)" + "Bike"));
                } else {
                    sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }
        });
    }

    /**
     * Action rent of return bike in station
     *
     * @param evt
     */
    @SuppressWarnings("empty-statement")
    private void actionBike(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionBike
        int column = 2; //colum model
        int row = listBikeTable.getSelectedRow();
        if (row > -1) {
            for (Bike bike : arrBike) {
                if (bike.getModel().equals(listBikeTable.getModel().getValueAt(row, column).toString())) {
                    try {
                        if (MainEntry.user.getStatus() == Constants.USER_AVAIL && bike.getStatus() == Constants.BIKE_AVAIL) {
                            MainEntry.move(this, new ScanCodeScreen(bike.getDockingPoint().getBarCode(), this));
                        } else if (MainEntry.user.getStatus() == Constants.USER_RENTING && bike.getStatus() == Constants.BIKE_RENTED) {
                            MainEntry.move(this, new ScanCodeScreen(bike.getDockingPoint().getBarCode(), transaction, this));
                        } else {
                            JOptionPane.showMessageDialog(this, "This bike has been rented.\nPlease choose another!");
                        }
                    } catch (IOException | SQLException ex) {
                        Logger.getLogger(ViewListBikeScreen.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "You have not choose station");
        }
    }//GEN-LAST:event_actionBike

    /**
     * Handle event user click to back button.
     *
     * @param evt
     */
    private void goBack(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goBack
        MainEntry.move(this, backScreen);
    }//GEN-LAST:event_goBack

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actionBikeButton;
    private javax.swing.JButton backButton;
    private javax.swing.JComboBox<String> filterComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable listBikeTable;
    private javax.swing.JLabel stationName;
    // End of variables declaration//GEN-END:variables
}
