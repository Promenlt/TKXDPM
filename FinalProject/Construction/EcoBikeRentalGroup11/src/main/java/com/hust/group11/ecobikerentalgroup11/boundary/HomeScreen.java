/* 
 * --------------------ECOBIKE RENTAL 1.0.1--------------------
 *
 * Design and Software Construction 20201
 *
 * Copyright (C) 2020 by Group 11
 *
 * Nguyen Thanh Long
 * Nguyen Hai Long
 * Nguyen Cong Luat
 * UN LyAn
 *
 * This software is created for academic purposes only. Not for
 * commercial purposes. We do not guarantee maintenance issues.
 *
 * ------------------------------------------------------------
 */
package com.hust.group11.ecobikerentalgroup11.boundary;

import com.hust.group11.ecobikerentalgroup11.Constants;
import com.hust.group11.ecobikerentalgroup11.entity.Transaction;
import com.hust.group11.ecobikerentalgroup11.MainEntry;
import java.awt.Color;
import java.io.IOException;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Nguyen Thanh Long
 */
public class HomeScreen extends javax.swing.JFrame {

    /**
     * Creates new form HomeScreen
     */
    private Transaction transaction;

    /**
     * constructor for user is not renting.
     *
     * @throws SQLException
     * @throws IOException
     */
    public HomeScreen() throws SQLException, IOException {
        initComponents();
        this.generalInit();
        System.out.println("transaction" + this.transaction);
        if (MainEntry.user.getStatus() == Constants.USER_RENTING) {
            this.transaction = Transaction.getTransaction();
            statusLabel.setForeground(Color.green);
            statusLabel.setText("renting...");
        } else {
            statusLabel.setForeground(Color.red);
            statusLabel.setText("not rent");
        }
    }

    /**
     * Constructor for user renting. user must have transaction before go to
     * this.
     *
     * @param transaction
     * @param backScreen
     * @throws SQLException
     * @throws IOException
     */
    public HomeScreen(Transaction transaction, JFrame backScreen) throws SQLException, IOException {
        initComponents();
        this.generalInit();
        this.transaction = transaction;
        statusLabel.setForeground(Color.green);
        statusLabel.setText("renting...");
    }

    public void generalInit() throws IOException {
        this.setIconImage(ImageIO.read(getClass().getClassLoader().getResourceAsStream("img/icon_app.png")));
        imageCodePanel.showImage(getClass().getClassLoader().getResourceAsStream("img/home_station.jpg"));
        usernameLabel.setText(MainEntry.user.getName());
        nameApp.setForeground(Color.BLUE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nameApp = new javax.swing.JLabel();
        nameGroup = new javax.swing.JLabel();
        logoutButton = new javax.swing.JButton();
        usernameLabel = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        imageCodePanel = new com.hust.group11.ecobikerentalgroup11.boundary.ImageCodePanel();
        findStationButton = new javax.swing.JButton();
        rentingButton = new javax.swing.JButton();
        rentBikeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Home");
        setResizable(false);

        nameApp.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        nameApp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        nameApp.setText("ECO BIKE RENTAL");

        nameGroup.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        nameGroup.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        nameGroup.setText("GROUP 11");

        logoutButton.setText("Log out");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOut(evt);
            }
        });

        usernameLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        usernameLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        usernameLabel.setText("Username");

        statusLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        statusLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusLabel.setText("Status");

        imageCodePanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout imageCodePanelLayout = new javax.swing.GroupLayout(imageCodePanel);
        imageCodePanel.setLayout(imageCodePanelLayout);
        imageCodePanelLayout.setHorizontalGroup(
            imageCodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        imageCodePanelLayout.setVerticalGroup(
            imageCodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 171, Short.MAX_VALUE)
        );

        findStationButton.setText("Find Station");
        findStationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findStation(evt);
            }
        });

        rentingButton.setText("Renting");
        rentingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBikeRenting(evt);
            }
        });

        rentBikeButton.setText("Rent bike");
        rentBikeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentBike(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameApp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nameGroup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(usernameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                    .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logoutButton)
                .addGap(51, 51, 51))
            .addGroup(layout.createSequentialGroup()
                .addGap(181, 181, 181)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(imageCodePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(findStationButton)
                        .addGap(33, 33, 33)
                        .addComponent(rentingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(rentBikeButton)))
                .addContainerGap(197, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameApp)
                    .addComponent(logoutButton)
                    .addComponent(usernameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameGroup)
                    .addComponent(statusLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(findStationButton)
                    .addComponent(rentingButton)
                    .addComponent(rentBikeButton))
                .addGap(27, 27, 27)
                .addComponent(imageCodePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(78, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Handle event user click button renting. This method will check Are user
     * renting. If it true, route user to Renting Screen. Else show message
     * warning user.
     *
     * @param evt
     */
    private void viewBikeRenting(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBikeRenting
        if (MainEntry.user.getStatus() == Constants.USER_RENTING) {
            try {
                MainEntry.move(this, new RentingScreen(transaction, this));
            } catch (IOException | ParseException ex) {
                Logger.getLogger(HomeScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "You are not renting");
        }
    }//GEN-LAST:event_viewBikeRenting
    /**
     * Handle event user click button rent bike. This method check status of
     * user. If user available user can rent. else user must return bike. then
     * it will route user to Scan Code Screen.
     *
     * @param evt
     */
    private void rentBike(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rentBike
        try {
            if (MainEntry.user.getStatus() == Constants.USER_AVAIL) {
                //Scancode for rent bike
                MainEntry.move(this, new ScanCodeScreen("", this));
            } else {
                // Scancode for return bike
                MainEntry.move(this, new ScanCodeScreen("", transaction, this));
            }
        } catch (SQLException | IOException ex) {
            Logger.getLogger(HomeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_rentBike
    /**
     * Handle event user click button log out. This method will ask user 1 time
     * to confirm user want to log out. If user confirm, it route user to login
     * screen.
     *
     * @param evt
     */
    private void logOut(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOut
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure");
        System.out.println("confirm: " + confirm);
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                MainEntry.move(this, new LoginScreen());
            } catch (IOException ex) {
                Logger.getLogger(HomeScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_logOut

    /**
     * Handle event user click button find station. if user have renting. it
     * will pass transaction to next screen. User renting have to return before
     * rent new bike.
     *
     * @param evt
     */
    private void findStation(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findStation
        try {
            if (MainEntry.user.getStatus() == Constants.USER_AVAIL) {
                MainEntry.move(this, new FindStationScreen(this));
            } else {
                MainEntry.move(this, new FindStationScreen(transaction, this));
            }
        } catch (SQLException | IOException ex) {
            Logger.getLogger(HomeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_findStation


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton findStationButton;
    private com.hust.group11.ecobikerentalgroup11.boundary.ImageCodePanel imageCodePanel;
    private javax.swing.JButton logoutButton;
    private javax.swing.JLabel nameApp;
    private javax.swing.JLabel nameGroup;
    private javax.swing.JButton rentBikeButton;
    private javax.swing.JButton rentingButton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables
}
